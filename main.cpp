#include <iostream>
#include <vector>
using namespace std;

/* Пример карты, 1 - дорога, 0 не дорога
1 0 0 0 0 0 0 0 0 0
1 1 1 1 1 1 0 0 0 0
0 0 0 0 0 1 0 0 0 0
0 0 0 0 0 1 0 0 0 0
0 0 0 0 0 1 1 1 1 1
0 0 0 0 0 0 0 0 0 0
*/

//функция меняющая матрицу-карту
//заносит на карту координаты объекта
void ChangeMap(int **array,int m, int n, int number){
    array[m][n]=number;
}

//класс стандартного водителя
//(мб потом сделаем классы водителей с разным поведением)
class standart_Car{
    
	public:
    	int x,y,dx,dy;
        vector<int> parameters; // мб и не понадобится, пока оставим
     
     //параметры по умолчанию
	standart_Car(){
		x=0;
		y=0;
		dx=1;
		dy=1;
}
    //метод, задающий параметры объекта, всё завязано на матрице карты
	void SetParameters(int input_x, int input_y,int input_dx,int input_dy){
        x=input_x;
        y=input_y;
        dx=input_dx;
        dy=input_dy;
    }
    //метод, отвечающий за движение по дороге, не учитывает близость 
    //других объектов
       void Move(int **Map){
        //если надо ехать вдоль оси x
        if  (Map[x+dx][y] == 1){
           SetParameters(x+dx,y,dx+1,0); 
        }
        //если надо ехать вдоль оси y
        else if (Map[x][y+dy] == 1){
            SetParameters(x,y+dy,0,dy+1);
        }
        //если с такой скоростью вылетаешь за дорогу, понижаем скорость
        //в конечном итоге, если некуда ехать - стоим
        else{
            SetParameters(x,y,dx-1,dy-1); 
           
        }
    }
	//метод, для извлечение параметров объекта
	//пока что нужна для проверки, потом уберём
	void GetParameters(){
        
        cout<<x<<endl;
        cout<<y<<endl;
        cout<<dx<<endl;
        cout<<dy<<endl;
        
        parameters.push_back(x);
        parameters.push_back(y);
        parameters.push_back(dx);
        parameters.push_back(dy);
        
    }
    /*
     0) Метод простое передвижение
     1)Метод проверка близости к другим объектам
     2)Метод изменения скорости:
     2.1 Просто ускорение
     2.2 При приближении к впереди едущему автомобилю
     2.3 При остановке у светофора
     ....
     */
};


int main()
{
    bool life=true;

/*
int map_coord[][]; матрица-карта, показывающая распределение объектов
int map_speed[][]; матрица-карта СКОРОСТЕЙ машин
map_coord[i][j] - координата машины на карте,
map_speed[i][j] - скорость машины, в ij координате
*/
    //Создаём карты
    int DIM1,DIM2;//размеры исходя размеров картинки
    //пока картинки нет задаём вручную, потом уберём
    cin>>DIM1;
    cin>>DIM2;
    //
    //создаём двумерный массив
    int **map_coord; //взял отсюда https://code-live.ru/post/cpp-array-tutorial-part-2/  
    // создание
    map_coord = new int * [DIM1];    // массив указателей
    for (int i = 0; i < DIM1; i++) {  
        map_coord[i] = new int [DIM2];     // инициализация указателей
    }
    //для начала заполним нулями, при рисовании заполним 
    //число - объект
    for (int i = 0; i < DIM1; i++) {
        for (int j = 0; j < DIM2; j++) {
            map_coord[i][j] = 0;
        }
    }

int **map_speed; //взял отсюда https://code-live.ru/post/cpp-array-tutorial-part-2/  
    // создание
    map_speed = new int * [DIM1];    // массив указателей
    for (int i = 0; i < DIM1; i++) {  
        map_speed[i] = new int [DIM2];     // инициализация указателей
    }
    //для начала заполним нулями, при рисовании заполним 
    //число - объект
    for (int i = 0; i < DIM1; i++) {
        for (int j = 0; j < DIM2; j++) {
            map_speed[i][j] = 0;
        }
    }
		
//создание объекта класса Car
//в дальнейшем объекты будут создаваться циклом, 
//так как будет много автомобилей
    standart_Car Test_Car;

//Задание начальных параметров, всё завязано на матрице карты
//Одним циклом зададим много объектов
    Test_Car.SetParameters(1,0,0,4);//образец

//Бесконечный цикл для запуска симуляции
while (life==true){
    
    //Последовательность действий (надо придумать)
    //Одинаковая для всех, но с разными числами x y dx dy
    ChangeMap(map_coord,Test_Car.x,Test_Car.y,1); //сразу записываем в карту на место машины 1 - дорога, 
   //если он не сдвинется Move() занесёт его обратно
    //В карту map_speed занесём зн-е ненулевой компоненты скорости
    Test_Car.Move(map_coord); //передвижение по дороге без учёта близости объектов
    Test_Car.GetParameters();
 /*
 1)Задание начальных параметров, всё завязано на матрице карты
 2)Проверка на близость других объектов
 3)движение
 4)Занесение новых данных в карту
 ....
 Также стоит подумать о функции задерживании времени(для понятной визуализации) 
 */
}
return 0;
}

